% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metric_scores.R
\name{metric.scores}
\alias{metric.scores}
\title{Score metrics}
\usage{
metric.scores(
  DF_Metrics,
  col_MetricNames,
  col_IndexName,
  col_IndexRegion,
  DF_Thresh_Metric,
  DF_Thresh_Index,
  col_ni_total = "ni_total"
)
}
\arguments{
\item{DF_Metrics}{Data frame of metric values (as columns), Index Name, and
Index Region (strata).}

\item{col_MetricNames}{Names of columns of metric values.}

\item{col_IndexName}{Name of column with index (e.g., MBSS.2005.Bugs)}

\item{col_IndexRegion}{Name of column with relevant bioregion or site class
(e.g., COASTAL).}

\item{DF_Thresh_Metric}{Data frame of Scoring Thresholds for metrics (INDEX_NAME, INDEX_REGION,
METRIC_NAME, Direction, Thresh_Lo, Thresh_Mid, Thresh_Hi, ScoreRegime
, SingleValue_Add, NormDist_Tail_Lo, NormDist_Tail_Hi, CatGrad_xvar, CatGrad_InfPt
, CatGrad_Lo_m,    CatGrad_Lo_b,    CatGrad_Mid_m,    CatGrad_Mid_b,    CatGrad_Hi_m,    CatGrad_Hi_b).}

\item{DF_Thresh_Index}{Data frame of Scoring Thresholds for indices (INDEX_NAME, INDEX_REGION,
METRIC_NAME, ScoreRegime, Thresh01, Thresh02, Thresh03, Thresh04, Thresh05, Thresh06, Thresh07
, Nar01, Nar02, Nar03, Nar04, Nar05, Nar06).}

\item{col_ni_total}{Name of column with total number of individuals.  Used
for cases where sample was collected but no organisms collected.  Default = ni_total.}
}
\value{
vector of scores
}
\description{
This function calculates metric scores based on a Thresholds data frame.
Can generate scores for categories n=3 (e.g., 1/3/5, ScoreRegime="Cat_135")
or n=4 (e.g., 0/2/4/6, ScoreRegime="Cat_0246")
or continuous (e.g., 0-100, ScoreRegime="Cont_0100").
}
\details{
The R library dplyr is needed for this function.

For all ScoreRegime cases at the index level a "sum_Index" field is computed
that is the sum of all metric scores.  Valid "ScoreRegime" values are:

* SUM = all metric scores added together.

* AVERAGE = all metric scores added and divided by the number of metrics.
The index is on the same scale as the individual metric scores.

* AVERAGE_100 = AVERAGE is scaled 0 to 100.
}
\examples{
# Example data

library(readxl)
library(reshape2)

# Thresholds
fn_thresh <- file.path(system.file(package="BioMonTools"), "extdata", "MetricScoring.xlsx")
df_thresh_metric <- read_excel(fn_thresh, sheet="metric.scoring")
df_thresh_index <- read_excel(fn_thresh, sheet="index.scoring")

#~~~~~~~~~~~~~~~~~~~~~~~~
# Pacific Northwest, BCG Level 1 Indicator Taxa Index
df_samps_bugs <- read_excel(system.file("extdata/Data_Benthos.xlsx"
                                        , package="BioMonTools")
                            , guess_max = 10^6)

myIndex <- "BCG_PacNW_L1"
df_samps_bugs$Index_Name   <- myIndex
df_samps_bugs$Index_Region <- "ALL"
(myMetrics.Bugs <- unique(as.data.frame(df_thresh_metric)[df_thresh_metric[
                          , "INDEX_NAME"]==myIndex, "METRIC_NAME"]))
# Run Function
df_metric_values_bugs <- metric.values(df_samps_bugs, "bugs"
                                       , fun.MetricNames = myMetrics.Bugs)

# index to BCG.PacNW.L1
df_metric_values_bugs$INDEX_NAME <- myIndex
df_metric_values_bugs$INDEX_REGION <- "ALL"

# SCORE Metrics
df_metric_scores_bugs <- metric.scores(df_metric_values_bugs
                                       , myMetrics.Bugs
                                       , "INDEX_NAME"
                                       , "INDEX_REGION"
                                       , df_thresh_metric
                                       , df_thresh_index)

\dontrun{
# View Results
View(df_metric_scores_bugs)
}
# QC, table
table(df_metric_scores_bugs$Index, df_metric_scores_bugs$Index_Nar)
# QC, plot
hist(df_metric_scores_bugs$Index, main="PacNW BCG Example Data"
     , xlab="Level 1 Indicator Taxa Index Score")
abline(v=c(21,30), col="blue")
text(21+c(-2,+2), 200, c("Low","Medium"), col="blue")

#~~~~~~~~~~~~~~~~~~~~~~~~
# Metrics, Index, Benthic Macroinvertebrates, genus
# (generate values then scores)
myIndex <- "MBSS_2005_Bugs"
# Thresholds
# imported above
# get metric names for myIndex
(myMetrics_Bugs_MBSS <- unique(df_thresh_metric[df_thresh_metric[, "INDEX_NAME"]
                               == myIndex, "METRIC_NAME", TRUE]))
# Taxa Data
myDF_Bugs_MBSS <- data_benthos_MBSS
myDF_Bugs_MBSS$NONTARGET <- FALSE
myDF_Bugs_MBSS$INDEX_REGION <- toupper(myDF_Bugs_MBSS$strata_r)
myDF_Bugs_MBSS$SAMPLEID <- myDF_Bugs_MBSS$SITE
myDF_Bugs_MBSS$INDEX_NAME <- myDF_Bugs_MBSS$Index.Name
myDF_Bugs_MBSS$TAXAID <- myDF_Bugs_MBSS$TAXON
myDF_Bugs_MBSS$SubPhylum <- NA
myDF_Bugs_MBSS$SubFamily <- NA
myDF_Bugs_MBSS$TOLVAL <- myDF_Bugs_MBSS$FinalTolVal07
myDF_Bugs_MBSS$TOLVAL2 <- myDF_Bugs_MBSS$FinalTolVal08
myDF_Bugs_MBSS$EXCLUDE <- myDF_Bugs_MBSS$EXCLUDE=="Y"
myMetric_Values_Bugs_MBSS <- metric.values(myDF_Bugs_MBSS, "bugs", myMetrics_Bugs_MBSS)

\dontrun{
View(myMetric_Values_Bugs_MBSS)
}
# SCORE
myMetric_Values_Bugs_MBSS$INDEX_REGION <- toupper(myMetric_Values_Bugs_MBSS$INDEX_REGION)
Metrics_Bugs_Scores_MBSS <- metric.scores(myMetric_Values_Bugs_MBSS
                                          , myMetrics_Bugs_MBSS
                                          , "INDEX_NAME"
                                          , "INDEX_REGION"
                                          , df_thresh_metric
                                          , df_thresh_index)
\dontrun{
# View Results
View(Metrics_Bugs_Scores_MBSS)
}

# QC Index Scores and Narratives
# Set Narrative as Ordered Factor
Nar_MBSS <- c("Very Poor", "Poor", "Fair", "Good")
Metrics_Bugs_Scores_MBSS$Index_Nar <- factor(Metrics_Bugs_Scores_MBSS$Index_Nar
                                            , levels=Nar_MBSS
                                            , labels=Nar_MBSS
                                            , ordered=TRUE)
table(Metrics_Bugs_Scores_MBSS$Index, Metrics_Bugs_Scores_MBSS$Index_Nar, useNA="ifany")

# QC bug count (manual)
Metrics_Bugs_Scores_MBSS[Metrics_Bugs_Scores_MBSS[,"ni_total"]>120,
"QC_Count"] <- "LARGE"
Metrics_Bugs_Scores_MBSS[Metrics_Bugs_Scores_MBSS[,"ni_total"]<60,
"QC_Count"] <- "SMALL"
Metrics_Bugs_Scores_MBSS[is.na(Metrics_Bugs_Scores_MBSS[,"QC_Count"]),
"QC_Count"] <- "OK"
# table of QC_Count
table(Metrics_Bugs_Scores_MBSS$QC_Count)

# QC bug count (with function)
# Import Checks
#df_checks <- read_excel(system.file("./extdata/MetricFlags.xlsx"
#                                           , package="BioMonTools"), sheet="Flags")
# Run Function
#df_flags <- qc.checks(Metrics_Bugs_Scores_MBSS, df_checks)
# Summarize Results
# table(df_flags[,"CHECKNAME"], df_flags[,"FLAG"], useNA="ifany")

}
