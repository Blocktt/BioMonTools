% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metric.scores.R
\name{metric.scores}
\alias{metric.scores}
\title{Score metrics}
\usage{
metric.scores(
  DF_Metrics,
  col_MetricNames,
  col_IndexName,
  col_IndexRegion,
  DF_Thresh_Metric,
  DF_Thresh_Index,
  col_ni_total = "ni_total"
)
}
\arguments{
\item{DF_Metrics}{Data frame of metric values (as columns), Index Name, and
Index Region (strata).}

\item{col_MetricNames}{Names of columns of metric values.}

\item{col_IndexName}{Name of column with index (e.g., MBSS.2005.Bugs)}

\item{col_IndexRegion}{Name of column with relevant bioregion or site class
(e.g., COASTAL).}

\item{DF_Thresh_Metric}{Data frame of Scoring Thresholds for metrics (INDEX_NAME, INDEX_REGION,
METRIC_NAME, Direction, Thresh_Lo, Thresh_Mid, Thresh_Hi, ScoreRegime
, SingleValue_Add, NormDist_Tail_Lo, NormDist_Tail_Hi, CatGrad_xvar, CatGrad_InfPt
, CatGrad_Lo_m,    CatGrad_Lo_b,    CatGrad_Mid_m,    CatGrad_Mid_b,    CatGrad_Hi_m,    CatGrad_Hi_b).}

\item{DF_Thresh_Index}{Data frame of Scoring Thresholds for indices (INDEX_NAME, INDEX_REGION,
METRIC_NAME, ScoreRegime, Thresh01, Thresh02, Thresh03, Thresh04, Thresh05, Thresh06, Thresh07
, Nar01, Nar02, Nar03, Nar04, Nar05, Nar06).}

\item{col_ni_total}{Name of column with total number of individuals.  Used
for cases where sample was collected but no organisms collected.  Default = ni_total.}
}
\value{
vector of scores
}
\description{
This function calculates metric scores based on a Thresholds data frame.
Can generate scores for categories n=3 (e.g., 1/3/5, ScoreRegime="Cat_135")
or n=4 (e.g., 0/2/4/6, ScoreRegime="Cat_0246")
or continuous (e.g., 0-100, ScoreRegime="Cont_0100").
}
\details{
The R library dplyr is needed for this function.

ScoreRegime for metrics is as above.  ScoreRegime for an index is "SUM" or "AVERAGE".
That is, for SUM all metric scores are added together.  For AVERAGE all metric scores are averaged.
In both cases a "sum_Index" field will be computed.
}
\examples{
# Example data

library(readxl)
library(reshape2)

# Thresholds
fn_thresh <- file.path(system.file(package="BioMonTools"), "extdata", "MetricScoring.xlsx")
df_thresh_metric <- read_excel(fn_thresh, sheet="metric.scoring")
df_thresh_index <- read_excel(fn_thresh, sheet="index.scoring")

#~~~~~~~~~~~~~~~~~~~~~~~~
# Pacific Northwest, BCG Level 1 Indicator Taxa Index
df_samps_bugs <- read_excel(system.file("extdata/Data_Benthos.xlsx"
                                        , package="BioMonTools")
                            , guess_max = 10^6)

myIndex <- "BCG.PacNW.L1"
df_samps_bugs$Index_Name   <- myIndex
df_samps_bugs$Index_Region <- "ALL"
(myMetrics.Bugs <- unique(as.data.frame(df_thresh_metric)[df_thresh_metric[
                          , "INDEX_NAME"]==myIndex, "METRIC_NAME"]))
# Run Function
df_metric_values_bugs <- metric.values(df_samps_bugs, "bugs"
                                       , fun.MetricNames = myMetrics.Bugs)

# index to BCG.PacNW.L1
df_metric_values_bugs$INDEX_NAME <- myIndex
df_metric_values_bugs$INDEX_REGION <- "ALL"

# SCORE Metrics
df_metric_scores_bugs <- metric.scores(df_metric_values_bugs
                                       , myMetrics.Bugs
                                       , "INDEX_NAME"
                                       , "INDEX_REGION"
                                       , df_thresh_metric
                                       , df_thresh_index)

\dontrun{
# View Results
View(df_metric_scores_bugs)
}
# QC, table
table(df_metric_scores_bugs$Index, df_metric_scores_bugs$Index_Nar)
# QC, plot
hist(df_metric_scores_bugs$Index, main="PacNW BCG Example Data"
     , xlab="Level 1 Indicator Taxa Index Score")
abline(v=c(21,30), col="blue")
text(21+c(-2,+2), 200, c("Low","Medium"), col="blue")

#~~~~~~~~~~~~~~~~~~~~~~~~
# Metrics, Index, Benthic Macroinvertebrates, genus
# (generate values then scores)
myIndex <- "MBSS.2005.Bugs"
# Thresholds
# imported above
# get metric names for myIndex
(myMetrics.Bugs.MBSS <- unique(df_thresh_metric[df_thresh_metric[, "INDEX_NAME"] == myIndex, "METRIC_NAME", TRUE]))
# Taxa Data
myDF.Bugs.MBSS <- MBSStools::taxa_bugs_genus
myDF.Bugs.MBSS$NONTARGET <- FALSE
myDF.Bugs.MBSS$INDEX_REGION <- toupper(myDF.Bugs.MBSS$strata_r)
myDF.Bugs.MBSS$SAMPLEID <- myDF.Bugs.MBSS$SITE
myDF.Bugs.MBSS$INDEX_NAME <- myDF.Bugs.MBSS$Index.Name
myDF.Bugs.MBSS$TAXAID <- myDF.Bugs.MBSS$TAXON
myDF.Bugs.MBSS$SubPhylum <- NA
myDF.Bugs.MBSS$SubFamily <- NA
myDF.Bugs.MBSS$TOLVAL <- myDF.Bugs.MBSS$FinalTolVal07
myDF.Bugs.MBSS$TOLVAL2 <- myDF.Bugs.MBSS$FinalTolVal08
myDF.Bugs.MBSS$EXCLUDE <- myDF.Bugs.MBSS$EXCLUDE=="Y"
myMetric.Values.Bugs.MBSS <- metric.values(myDF.Bugs.MBSS, "bugs", myMetrics.Bugs.MBSS)
#
\dontrun{
View(myMetric.Values.Bugs.MBSS)
}
# SCORE
myMetric.Values.Bugs.MBSS$INDEX_REGION <- toupper(myMetric.Values.Bugs.MBSS$INDEX_REGION)
Metrics.Bugs.Scores.MBSS <- metric.scores(myMetric.Values.Bugs.MBSS
                                          , myMetrics.Bugs.MBSS
                                          , "INDEX_NAME"
                                          , "INDEX_REGION"
                                          , df_thresh_metric
                                          , df_thresh_index)
# View Results
View(Metrics.Bugs.Scores.MBSS)

# QC Index Scores and Narratives
# Set Narrative as Ordered Factor
Nar.MBSS <- c("Very Poor", "Poor", "Fair", "Good")
Metrics.Bugs.Scores.MBSS$Index_Nar <- factor(Metrics.Bugs.Scores.MBSS$Index_Nar
                                            , levels=Nar.MBSS
                                            , labels=Nar.MBSS
                                            , ordered=TRUE)
table(Metrics.Bugs.Scores.MBSS$Index, Metrics.Bugs.Scores.MBSS$Index_Nar, useNA="ifany")

# QC bug count (manual)
Metrics.Bugs.Scores.MBSS[Metrics.Bugs.Scores.MBSS[,"ni_total"]>120,
"QC_Count"] <- "LARGE"
Metrics.Bugs.Scores.MBSS[Metrics.Bugs.Scores.MBSS[,"ni_total"]<60,
"QC_Count"] <- "SMALL"
Metrics.Bugs.Scores.MBSS[is.na(Metrics.Bugs.Scores.MBSS[,"QC_Count"]),
"QC_Count"] <- "OK"
# table of QC_Count
table(Metrics.Bugs.Scores.MBSS$QC_Count)

# QC bug count (with function)
# Import Checks
df.checks <- read_excel(system.file("./extdata/MetricFlags.xlsx"
                                          , package="BioMonTools"), sheet="Flags")
# Run Function
df.flags <- qc.checks(Metrics.Bugs.Scores.MBSS, df.checks)
# Summarize Results
table(df.flags[,"CHECKNAME"], df.flags[,"FLAG"], useNA="ifany")

}
